start:              ldc     msg1                                ; 
                    sout                                        ; Prompt to ask user if there is another problem
                    ain                                         ;
                    sub     no                                  ; Checks for "n" response
                    jnz     input                               ;
                    halt                                        ;
input:              ldc     msg2                                ; Prompt user to enter xin
                    sout                                        ;
                    ldc     xin                                 ;                    
                    sin                                         ;
                    ldc     msg3                                ;
                    sout                                        ; Prompt user to enter yin
                    ldc     yin                                 ;
                    sin                                         ;
                    ldc     yin                                 ;
                    push                                        ;
                    ldc     xin                                 ;
                    push                                        ; Pushes both xin and yin into the stack for function call floatMul
                    call    floatMul                            ;


;=============================================================  FLOATMUL  =================================================================           
floatMul:           ldr     0                                   ; Parses one char of the string of numbers,
                    st      temp                                ; Stores it in temp
                    sub     negCheck                            ; First of a series of checks; this sets the xflag
                    jnz     zeroCheckX                          ;
                    ld      @1                                  ;
                    st      xflag                               ; Sets xflag = 1 if String of numbers is negative
                    pop                                         ;
                    add     @1                                  ;
                    push                                        ;
                    ja      floatMul                            ;
zeroCheckX:         ld      leadingZeroLeft                     ; Checks for leading zeros. If leadingZeroLeft is set to 1, jumps to decimalX
                    jnz     decimalX                            ;
                    ld      temp                                ;
                    jnz     decimalX                            ;
                    pop                                         ;
                    add     @1                                  ;
                    push                                        ;
                    ja      floatMul                            ;
decimalX:           ld      temp                                ; Checks for decimal point
                    sub     decimalCheck                        ;
                    jnz     storeX                              ; If all checks are completed, jump to storeX and store digit in xArray
                    pop                                         ;
                    add     @1                                  ;
                    push                                        ;
                    ja      rightOfDecimalX                     ; If a decimal point is detected, jump to a different loop called rightOfDecimalX
storeX:             ld      temp                                ;
                    push                                        ;
                    ldc     xArray                              ;
                    add     index                               ;
                    sti                                         ; Stored in xArray
                    ld      index                               ;
                    add     @1                                  ;
                    st      index                               ;
                    ld      @1                                  ;
                    st      leadingZeroLeft                     ;
                    add     xLength                             ;
                    store   xLength                             ; Useful to know the string's length when computing the multiplication
                    ja      floatMul                            ;
rightOfDecimalX:    ldr     0                                   ; ***************************************************************** NOTE: ENTER DISCLAIMER, THAT PROGRAM WILL ONLY WORK WITH A DECIMAL POINT IN THE NUMBER
                    st      temp                                ;
                    jnz     endOfStringX                        ;
                    push                                        ;
                    ldc     xArray                              ;
                    add     index                               ;
                    sti                                         ;
                    pop                                         ; Increment xin index
                    add     @1                                  ;
                    push                                        ;
                    ld      index                               ; Incremenet xArray index
                    add     @1                                  ;
                    st      index                               ;
                    ld      xpointTemp                          ;
                    add     @1                                  ;
                    st      xpointTemp                          ; Adds a value to xpointTemp, but only gets added to xpoint if there exists a significant digit to the right of these zeros.
                    ja      rightOfDecimalX                     ;
endOfStringX:       add     @1                                  ;
                    jnz     storeXRight                         ; All checks done, jumps to Stores
                    pop                                         ;
                    ld      xpoint                              ;
                    add     xLength                             ;
                    st      xLength                             ;
                    ld      @0                                  ; Resets all reused variables, before jumping to floatMulY
                    st      index                               ;
                    st      leadingZeroLeft                     ;
                    ja      floatMulY                           ; If at the end of xin, repeat process with yin
storeXRight:        ld      temp                                ;
                    push                                        ;
                    ldc     xArray                              ;
                    add     index                               ;
                    sti                                         ;
                    ld      xpoint                              ;
                    add     @1                                  ;
                    add     xpointTemp                          ; Adds any leading zeros to xpoint, if digit stored is to the right of those zeros
                    st      xpoint                              ;
                    ld      @0                                  ;
                    st      xpointTemp                          ; Resets xpointTemp
                    ld      index                               ;
                    add     @1                                  ;
                    st      index                               ; Increment xArray index
                    pop                                         ;
                    add     @1                                  ; Increment xin index
                    push                                        ;
                    ja      rightOfDecimalX                     ;
floatMulY:          ldr     0                                   ; Repeat process with yin:
                    st      temp                                ; 
                    sub     negCheck                            ; 
                    jnz     zeroCheckY                          ;
                    ld      @1                                  ;
                    st      yflag                               ; 
                    pop                                         ;
                    add     @1                                  ;
                    push                                        ;
                    ja      floatMulY                           ;
zeroCheckY:         ld      leadingZeroLeft                     ; 
                    jnz     decimalY                            ;
                    ld      temp                                ;
                    jnz     decimalY                            ;
                    pop                                         ;
                    add     @1                                  ;
                    push                                        ;
                    ja      floatMulY                           ;
decimalY:           ld      temp                                ; 
                    sub     decimalCheck                        ;
                    jnz     storeY                              ; 
                    pop                                         ;
                    add     @1                                  ;
                    push                                        ;
                    ja      rightOfDecimalY                     ; 
storeY:             ld      temp                                ;
                    push                                        ;
                    ldc     yArray                              ;
                    add     index                               ;
                    sti                                         ; 
                    ld      index                               ;
                    add     @1                                  ;
                    st      index                               ;
                    ld      @1                                  ;
                    st      leadingZeroLeft                     ;
                    add     yLength                             ;
                    store   yLength                             ;
                    ja      floatMulY                           ;
rightOfDecimalY:    ldr     0                                   ; 
                    st      temp                                ;
                    jnz     endOfStringY                        ;
                    push                                        ;
                    ldc     yArray                              ;
                    add     index                               ;
                    sti                                         ;
                    pop                                         ;
                    add     @1                                  ;
                    push                                        ;
                    ld      index                               ;
                    add     @1                                  ;
                    st      index                               ;
                    ld      ypointTemp                          ;
                    add     @1                                  ;
                    st      ypointTemp                          ; 
                    ja      rightOfDecimalY                     ;
endOfStringY:       add     @1                                  ;
                    jnz     storeYRight                         ; 
                    pop                                         ;
                    ld      ypoint                              ;
                    add     yLength                             ;
                    st      yLength                             ;
                    ja      zOut                                ;
storeYRight:        ld      temp                                ;
                    push                                        ;
                    ldc     yArray                              ;
                    add     index                               ;
                    sti                                         ;
                    ld      ypoint                              ;
                    add     @1                                  ;
                    add     ypointTemp                          ; 
                    st      ypoint                              ;
                    ld      @0                                  ;
                    st      ypointTemp                          ; 
                    ld      index                               ;
                    add     @1                                  ;
                    st      index                               ; 
                    pop                                         ;
                    add     @1                                  ; 
                    push                                        ;
                    ja      rightOfDecimalY                     ;
zOut:

@0:                 dw      0                                   ;
@1:                 dw      1                                   ;
leadingZeroLeft:    dw      0                                   ; If set to 1, a significant digit has been stored to the left of the decimal, and zeros must be stored
index:              dw      0                                   ;
negCheck:           dw      2Dh                                 ; Check to set negative flag
decimalCheck:       dw      2Eh                                 ; Checks for decimal point
temp:               dw      0                                   ;
xLength:            dw      0                                   ;
xArray:             dw      20 dup 0                            ;
xpointTemp:         dw      0                                   ;
xpoint:             dw      0                                   ;
xflag:              dw      0                                   ;
yLength:            dw      0                                   ; 
yArray:             dw      20 dup 0                            ;
ypointTemp:         dw      0                                   ;
ypoint:             dw      0                                   ;
yflag:              dw      0                                   ;
;==========================================================================================================================================
msg1:               dw      "enter another problem? (y/n)"      ;
msg2:               dw      "enter xin:"                        ;
msg3:               dw      "enter yin:"                        ;
no:                 dw      6Eh                                 ;
xin:                dw      20 dup 0                            ;
xinBumper:          dw      -1                                  ; Used to signal that the xin and yin arrays have reached the end
yin:                dw      20 dup 0                            ;
yinBumper:          dw      -1                                  ;